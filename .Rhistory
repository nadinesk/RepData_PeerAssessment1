g + geom_point() + geom_smooth(lm)
g + geom_point() + geom_smooth() = "lm"
g + geom_point() + geom_smooth(method = "lm")
g + geom_point() + geom_smooth(method = "lm") + facet_grid(.~drv)
g + geom_point() + geom_smooth(method = "lm") + facet_grid(.~drv) = gtitle("Swirl Rules!")
g + geom_point() + geom_smooth(method = "lm") + facet_grid(.~drv) = ggtitle("Swirl Rules!")
g + geom_point() + geom_smooth(method = "lm") + facet_grid(.~drv) + ggtitle("Swirl Rules!")
g + geom_point(color = "pink", size = 4, alpha = 0.5)
g + geom_point(size = 4, alpha = 0.5, aes(color = drv))
g + geom_point(color = aes(color = drv), labs(title = "Swirl Rules!"), labs(x = "Displacement", y = "Hwy Mileage"))
g + geom_point(color = aes(color = drv) + labs(title = "Swirl Rules!") + labs(x = "Displacement", y = "Hwy Mileage"))
g + geom_point(aes(color = drv)) + labs(title = "Swirl Rules!") + labs(x = "Displacement", y = "Hwy Mileage"))
g + geom_point(aes(color = drv)) + labs(title = "Swirl Rules!") + labs(x = "Displacement", y = "Hwy Mileage")
g + geom_point(aes(color = drv), size = 2, alpha = 0.5) + geom_smooth(size = 4, linetype = 3, method = "lm", set = FALSE)
g + geom_point(aes(color = drv), size = 2, alpha = 0.5) + geom_smooth(size = 4, linetype = 3, method = "lm", se = FALSE)
g + geom_point(aes(color = drv)) + theme_bw(base_family = "Times")
plot(myx, myy, type ="l", ylim = c(-3,3))
g <- ggplot(testdat, aes(x = myx, y = myy))
g + geom_line()
g + geom_line() + ylim(-3,3)
g + geom_line() + coord_cartesian(-3,3)
g + geom_line() + coord_cartesian(ylim = c(-3,3))
g <- ggplot(mpg, aes(x = displ, y = hwy, color = factor(year)))
g + geom_point()
g + geom_point() + facet_grid(drv~cyl, margins = TRUE)
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black")
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black") + labs(x = "Displacement", y = "Highway Mileage", title = "Swirl Rules!")
str(diamonds)
qplot(price, data = diamonds)
range(diamonds$price)
qplot(price, data = diamonds, binwidth = 18497/30)
brk
counts
qplot(price, data = diamonds, binwidth = 18497/30, fill = cut())
qplot(price, data = diamonds, binwidth = 18497/30, fill = cut
qplot(price, data = diamonds, binwidth = 18497/30, fill = cut)
qplot(price, data = diamonds, geom = "density")
qplot(price, data = diamonds, geom = "density", color = cut)
qplot(cara, price, data = dataset)
qplot(carat, price, data = dataset)
qplot(carat, price data = diamonds)
qplot(carat, price, data = diamonds)
qplot(carat, price, data = diamonds, shape = cut)
qplot(carat, price, data = diamonds, color = cut)
qplot(carat, price, data = diamonds, color = cut, geom_smooth = "lm")
qplot(carat, price, data = diamonds, color = cut, geom_smooth(method = "lm"))
qplot(carat, price, data = diamonds, color = cut) + geom_smooth(method = "lm")
qplot(carat, price, data = diamonds, color = cut) + geom_smooth(method = "lm") + facets = .~cut
qplot(carat, price, data = diamonds, color = cut) + geom_smooth(method = "lm") + facets = .~cut
qplot(carat, price, data = diamonds, color = cut) + geom_smooth(method = "lm")
qplot(carat,price,data=diamonds, color=cut, facets=.~cut) + geom_smooth(method="lm")
g <- ggplot(diamonds, aes(depth, price))
summary(g)
g + geom_point(alpha = 1/3)
cutpoints <- quantile(diamonds$carat, seq(0,1,length = 4), na.rm = TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(diamonds aes(depth, price))
g <- ggplot(diamonds, aes(depth, price))
g + geom_point(alpha = 1/3, facet_grid = cut ~car2)
g + geom_point(alpha = 1/3) +  facet_grid(cut ~car2)
myd
diamonds[myd,]
(g+geom_point(alpha=1/3)+facet_grid(cut~car2)) + geom_smooth(method = "lm", size = 3, color = "pink")
g+geom_point(alpha=1/3)+facet_grid(cut~car2)+geom_smooth(method="lm",size=3,color="pink")
ggplot(diamonds, aes(carat, price)) + geom_boxplot() + facet_grid( .~cut)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
table(airquality$Month)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
data(airquality)
table(airquality$Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
pt1 <- 7+5+7
pt2 <- 5+4+7+9+6
pt1to3 <- sum(pt1, pt2, pt3)
pt3 <- 4+7+6+3
pt1to3 <- sum(pt1, pt2, pt3)
pt1to3
pt1
pt2
pt3
19+31+20
set.seed(1234)
par(mar = c(0,0,0,0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1,2,1), each = 4), sd =0.2)
text(x + 0.05, y + 0.05, labels = as.character1:12))
text(x + 0.05, y + 0.05, labels = as.character(1:12))
set.seed(1234)
par(mar = c(0, 0, 0, 0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
dataFrame <- data.frame(x = x, y=y)
dist(dataFrame)
dataFrame
.84-.75
.75-1.05
0.75-1.21
1.21-1.05
1.21-.53
1.21-1.05
dist(dataFrame)
distxy <- dist(dataFrame)
hClustering <- hclust(distxy)
plot(hClustering)
hClustering
library(swirl)
install_course_zip("C:/Users/nfischoff.CENTRAL/Downloads/swirl_courses-master.zip", multi = TRUE,
which_course = "R Programming")
swirl()
dist(dataFrame)
hclust(distxy)
hc <- hclust(distxy)
hc
plot(hc)
as.dendogram(hc)
as.denrogram(hc)
as.dendrogram(hc)
plot(as.dendrogram(hc))
abline(h = 1.5, col = "blue")
abline(h = 0.4, col = "blue")
abline(h = .4, col = "blue")
abline(h = .4, col = "red")
7
5
10
12
abline(h = .05, col = "red")
dist(dFsm)
hc
heatmap(dataMatrix, col = cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
cmat
points(cx, cy, col = c("red", "orange", "purple"), pch = 3, cex = 2, lwd = 2)
mdist(x, y, cx, cy)
apply(distTmp, 2, which.min)
points(x,y,pch=19, cex=2, col= cols1[newClust])
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newCy, col = cols1, pch = 8, cex = 2, lwd = 2)
mdist(x,y,newCx, newCy)
apply(distTmp2, 2, which.min)
points(x,y, pcy = 19, cex = 2, col = col1[newClust2])
points(x,y, pcy = 19, cex = 2, col = cols1[newClust2])
points(x,y,pch=19,cex=2,col=cols1[newClust2])
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx, finalCy, col = cols1, pch = 9, cex=2, lwd=2)
kmeans(dataFrame, centers = 3)
kmObj$iter
plot(x,y,col = kmObj$cluster, pch = 19, cex = 2)
points(kmObj$centers, col = c("black", "red", "green"), pch=3, cex=3, lwd=3)
plot(x,y,col = kmeans(dataFrame,6)$cluster, pch=19, cex=2)
plot(x,y,col = kmeans(dataFrame,6)$cluster, pch=19, cex=2)
plot(x,y,col = kmeans(dataFrame,6)$cluster, pch=19, cex=2)
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source(filename = "addPatt.R", local = TRUE)
source("addPatt.R", local = TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu %*% diag %*% t(matv)
svd(scale(mat))
prcomp(scale(mat))
svdsvd$v[,1]
svd$v[,1]
svd1$v[,1]
svd1$d
head(constantMatrix)
svd$d
svd2$d
svd2$v[,2]
svd2$v[,1:2]
svd2$d
dim(faceData)
a1 <- svd1$u %*% svd1$d %*% svd1$v
svd1$d[1] * (svd1$u %*% svd1$v)
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
myImage(a1)
a2 <- svd1$u[,1:2] %*% svd1$d[1:2] %*% t(svd1$v[,1:2])
a2 <- svd1$u[,1:2] * svd1$d[1:2] * t(svd1$v[,1:2])
a2 <- (svd1$u[,1:2] * svd1$d[1:2]) %*% t(svd1$v[,1:2])
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage
myImage(a2)
myImage <- svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5])
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]) )
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
rm(myImage)
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
skip()
swirl()
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
dim(ssd)
names(ssd)[562:563]
names(ssd[562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, subject ==1)
dim(sub1)
names(sub1[,1:12])
myedit("showXY.R")
showMe(1:6)
mdist(sub1[,:3])
mdist(sub1[,1:3])
mdist <- sub1[,1:3]
mdist <- dist(sub1[,1:3])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
mdist <- dist(sub1[,10:12])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
svd1 <- svd(scale(sub1[,-c(562,563)]))
dim(svd1$u)
maxCon <- whic.max(svd1$v[,2])
maxCon <- whicj.max(svd1$v[,2])
maxCon <- which.max(svd1$v[,2])
mdist <- dist(sub1[c(10:12)])
mdist <- dist(sub1[c(10:12, maxCon)])
mdist <- dist(sub1[,c(10:12,maxCon)])
hculstering <- hclust(mdist)
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
names(sub1[maxCon])
kclust <- kmeans(sub1[,-c(562,563)]), centers = 6)
kclust <- kmeans(sub1[,-c(562,563)], centers = 6)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- means(sub1[,-c(562,563)], centers = 6, nstart = 100)
kClust <- kmeans(sub1[,-c(562,563)], centers = 6, nstart = 100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying <- kclust$size==29
laying <- which(kclust$size==29)
laying <- which(kClust$size==29)
plot(kClust$centers[laying,1:12], pch = 19, ylab = "Laying Cluster")
names(sub1[,c(1:3)])
walkdown <- which(kClust$size == 49)
plot(kClust$centers[walkdown, 1:12], pch = 19, ylab = "Walkdown Cluster")
library(kernlab)
install.packages("kernlab")
library(kernlab)
data(spam)
set.seet(3435)
set.seed(3435)
trainIndicator = rbinom(4601, size = 1, prob = 0.5)
table(trainIndicator)
trainSpam = spam[trainIdicator == 1]
trainSpam = spam[trainIdicator == 1, ]
trainSpam = spam[trainIndicator == 1, ]
testSpam = spam[trainindicator == 0,]
testSpam = spam[trainIndicator == 0,]
2314+2287
str(spam)
names(trainSpam)
head(trainSpam)
table(trainSpam$type)
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(log10(trainSpam$capitalAve +1) ~ trainSpam$type)
hCluster = hclust(dist(t([trainSpam[,1:57])))
hCluster = hclust(dist(t([trainSpam[,1:57]])))
trainSpam$numType = as.numeric(trainSpam$type) - 1
table(trainSpam$numType)
costFunction = function(x,y) sum(x != (y > 0.5))
costFunction = function(x,y) sum(x != (y > 0.5))
library(boot)
for (i in 1:55) {
lmFormula = reformulate(names(trainSpam)[i], response = "numType")
glmFit = glm(lmFormula, family = "binomial", data = trainSpam)
cvError[i] = cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
}
names(trainSpam)[which.min(cvError)]
for (i in 1:55) {
lmFormula = reformulate(names(trainSpam)[i], response = "numType")
glmFit = glm(lmFormula, family = "binomial", data = trainSpam)
cvError[i] = cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
}
cvError = rep(NA, 55)
for (i in 1:55) {
lmFormula = reformulate(names(trainSpam)[i], response = "numType")
glmFit = glm(lmFormula, family = "binomial", data = trainSpam)
cvError[i] = cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
}
warnings()
names(trainSpam)[which.min(cvError)]
predictionModel = glm(numType ~ charDollar, family = "binomial", data = trainSpam)
predictionTest = predict(predictionModel, testSpam)
predictedSpam = rep("nonspam", dim(testSpam)[1])
predictedSpam[predictionModel$fitted > 0.5] = "spam"
table(predictedSpam, testSpam$type)
library(markdown)
install.packages("markdown")
install.packages("markdown")
library(markdown)
setwd("D:/New_folder/RepData_PeerAssessment1/")
setwd("D:/RepData_PeerAssessment1/")
steps <- read.csv("activity.csv")
steps$date <- as.Date(as.character(steps$date))
steps$date <- format(steps$date, "%m/%d/%y")
library(dplyr)
library(xtable)
steps_total <- steps %>%
group_by(date) %>%
summarize(sum = sum(steps))
hist(steps_total$sum)
hist(steps_total$sum, main = "Total Number of Daily Steps")
hist(steps_total$sum, main = "Total Number of Daily Steps", ylab="test")
hist(steps_total$sum, main = "Total Number of Daily Steps", xlab = "Steps")
mean_TS <- mean(steps_total$sum)
v
mean_TS
mean_TS <- mean(steps_total$sum, na.rm = TRUE)
mean_TS
median_TS <- median(steps_total$sum, na.rm = TRUE)
median_TS
View(steps_total)
s_int <- steps %>%
group_by(interval) %>%
summarize(avg_steps = mean(steps, na.rm=TRUE))
library(ggplot2)
ts_int <- ggplot(data=stepsint_avg, aes(x=interval, y=meanInt))  + geom_line() + ggtitle("Average Steps Taken by Interval Across All Days") +xlab("Interval") + ylab("Average Steps")
ts_int <- ggplot(data=s_int, aes(x=interval, y=avg_steps))  + geom_line() + ggtitle("Average Steps Taken by Interval Across All Days") +xlab("Interval") + ylab("Average Steps")
ts_int
max_int <- filter(s_int, maxInt == max(s_int$meanInt))
max_int <- filter(s_int, avg == max(s_int$avg))
max_int <- filter(s_int, avg_steps == max(s_int$avg_steps))
max_avg_int$interval
max_int$interval
max_int
setwd("D:/RepData_PeerAssessment1/")
steps <- read.csv("activity.csv")
steps$date <- as.Date(as.character(steps$date))
steps_total <- steps %>%
group_by(date) %>%
summarize(sum = sum(steps))
hist(steps_total$sum, main = "Total Number of Daily Steps", xlab = "Steps")
mean_TS <- mean(steps_total$sum, na.rm = TRUE)
mean_TS
median_TS
missing_count <- sum(is.na(steps$steps))
missing_count
steps_meanInt1 <- steps %>%
group_by(interval) %>%
mutate(meanIntsteps = mean(steps, na.rm=TRUE))
There are `missing_count` missing values in the dataset.
Filling in the missing values with the mean for each five-minute interval
steps_meanInt1 <- steps %>%
group_by(interval) %>%
mutate(meanIntsteps = mean(steps, na.rm=TRUE))
steps_meanInt1
steps_meanInt1$steps <- ifelse(is.na(steps_meanInt1$steps) == TRUE, steps_meanInt1$meanIntsteps, steps_meanInt1$steps)
steps_mi$steps <- ifelse(is.na(steps_mi$steps) == TRUE, steps_mi$meanInt, steps_mi$steps)
steps_mi <- steps %>%
group_by(interval) %>%
mutate(meanIntsteps = mean(steps, na.rm=TRUE))
steps_mi$steps <- ifelse(is.na(steps_mi$steps) == TRUE, steps_mi$meanInt, steps_mi$steps)
steps_mi$steps <- ifelse(is.na(steps_mi$steps) == TRUE, steps_mi$meanInt, steps_mi$steps)
steps_mi <- steps %>%
group_by(interval) %>%
mutate(meanInt = mean(steps, na.rm=TRUE))
steps_mi$steps <- ifelse(is.na(steps_mi$steps) == TRUE, steps_mi$meanInt, steps_mi$steps)
steps_mi1 <- data.frame(steps_mi[c(1:3)])
steps_mi1
View(steps_mi1)
steps_mi1.sum <- steps_mi1 %>%
group_by(date) %>%
summarize(sum = sum(steps))
hist(steps_mi1.sum$sum)
hist(steps_mi1.sum$sum, main = "Histogram of Total Number of Daily Steps", xlab = "Total Steps")
hist(steps_mi1.sum$sum, main = "Histogram of Total Number of Daily Steps (Imputed Missing Values)", xlab = "Total Steps")
mean_IV_TS <- mean(steps_mi1.sum$sum)
mean_IV_TS
median_IV_TS <- median(steps_mi1.sum)
median_IV_TS
median_IV_TS <- median(steps_mi1.sum$sum)
median_IV_TS
mean_TS
View(steps_mi1.sum)
median_IV_TS
median_TS
mean_var <- mean_TS - mean_IV_TS
mean_var
median_var <- median_TS - median_IV_TS
median_var
steps$weekday <- weekdays(as.Date(steps$date))
table(steps$weekday)
steps$day_type <- gsub('Saturday|Sunday', 'weekend',steps$weekday )
steps$day_type1 <- gsub('Monday|Tuesday|Wednesday|Thursday|Friday', 'weekday',steps$day_type )
table(steps$day_type1)
View(steps_mi1)
steps_mi1$weekday <- weekdays(as.Date(steps_mi1$date))
steps_mi1$day_type <- gsub('Saturday|Sunday', 'weekend',steps_mi1$weekday )
steps_mi1$day_type1 <- gsub('Monday|Tuesday|Wednesday|Thursday|Friday', 'weekday',steps_mi1$day_type )
stepsmi1_wd <- steps_mi1 %>%
group_by(interval, day_type1) %>%
summarize(meanint1 = mean(steps_mi1, na.rm=TRUE))
View(stepsmi1_wd)
warnings()
steps_mi1$weekday <- weekdays(as.Date(steps_mi1$date))
str(stepsmi1)
str(steps_mi1)
str(stepsmi1_wd)
str(steps_mi1)
stepsmi1_wd <- steps_mi1 %>%
group_by(interval, day_type1) %>%
summarize(meanint1 = mean(steps_mi1, na.rm=TRUE))
stepsmi1_wd <- steps_mi1 %>%
group_by(interval, day_type1) %>%
summarize(meanint1 = mean(steps_mi1))
stepsmi1_wd <- steps_mi1 %>%
group_by(interval) %>%
summarize(meanint1 = mean(steps_mi1))
stepsmi1_wd <- steps_mi1 %>%
group_by(interval, day_type1) %>%
summarize(meanint1 = mean(steps_mi1$steps))
View(stepsmi1_wd)
stepsmi1_wd <- steps_mi1 %>%
group_by(interval) %>%
summarize(meanint1 = mean(steps_mi1$steps))
View(stepsmi1_wd)
View(steps_mi1)
stepsmi1_wd <- steps_mi1 %>%
group_by(interval, day_type1) %>%
summarize(meanint1 = mean(steps_mi1$steps))
View(stepsmi1_wd)
stepsmi1_wd <- steps_mi1 %>%
group_by(day_type1, interval) %>%
summarize(meanint1 = mean(steps_mi1$steps))
View(stepsmi1_wd)
table(steps_mi1$day_type1)
stepsmi1_wd <- steps_mi1 %>%
group_by(day_type1, interval) %>%
summarize(meanint1 = mean(steps))
View(stepsmi1_wd)
g01 <- ggplot(stepsmi1_wd, aes(interval, meanint1))
p01 <- g01 + geom_point(size=2, color = "purple") + facet_grid(. ~ day_type1) +
geom_line(color="brown") + ylab("Average") +
labs(title = "Average")
p01
g01 <- ggplot(stepsmi1_wd, aes(interval, meanint1))
p01 <- g01 + geom_point(size=2, color = "purple") + facet_grid(day_type1 . ~ ) +
geom_line(color="brown") + ylab("Average") +
labs(title = "Average")
g01 <- ggplot(stepsmi1_wd, aes(interval, meanint1))
p01 <- g01 + geom_point(size=2, color = "purple") + facet_grid(day_type1 ~ .) +
geom_line(color="brown") + ylab("Average") +
labs(title = "Average")
p01
p01 <- g01  + facet_grid(day_type1 ~ .) +
geom_line(color="brown") + ylab("Average") +
labs(title = "Average")
p01
g01 <- ggplot(stepsmi1_wd, aes(interval, meanint1))
p01 <- g01  + facet_grid(day_type1 ~ ., nrow=2, ncol=1) +
geom_line(color="brown") + ylab("Number of Steps") + layout
labs(title = "Average")
p01
g01 <- ggplot(stepsmi1_wd, aes(interval, meanint1))
p01 <- g01  + facet_grid(day_type1 ~ ., nrow=2, ncol=1) +
geom_line(color="brown") + ylab("Number of Steps") + layout
labs(title = "Average")
g01 <- ggplot(stepsmi1_wd, aes(interval, meanint1))
p01 <- g01  + facet_wrap(day_type1 ~ ., nrow=2, ncol=1) +
geom_line(color="brown") + ylab("Number of Steps") + layout
labs(title = "Average")
p01
g01 <- ggplot(stepsmi1_wd, aes(interval, meanint1))
p01 <- g01  + facet_wrap(day_type1, nrow=2, ncol=1) +
geom_line(color="brown") + ylab("Number of Steps") + layout
labs(title = "Average")
p01
p01 <- g01  + facet_grid(day_type1 ~ ., nrow=2, ncol=1) +
geom_line(color="brown") + ylab("Number of Steps") +
labs(title = "Average")
p01
g01 <- ggplot(stepsmi1_wd, aes(interval, meanint1))
p01 <- g01  + facet_wrap(day_type1 ~ ., nrow=2, ncol=1) +
geom_line(color="brown") + ylab("Number of Steps") +
labs(title = "Average")
p01
g01 <- ggplot(stepsmi1_wd, aes(interval, meanint1))
p01 <- g01  + facet_wrap(day_type1, nrow=2, ncol=1) +
geom_line(color="brown") + ylab("Number of Steps") +
labs(title = "Average")
p01
g01 <- ggplot(stepsmi1_wd, aes(interval, meanint1))
p01 <- g01  + facet_wrap(~ day_type1, nrow=2, ncol=1) +
geom_line(color="brown") + ylab("Number of Steps") +
labs(title = "Average")
p01
